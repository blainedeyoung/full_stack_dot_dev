# Generated by Django 5.0.6 on 2024-06-17 03:02

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('courses', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Board',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=100)),
                ('comment_text', models.TextField()),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_last_edited', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='author', to=settings.AUTH_USER_MODEL)),
                ('parent_board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parent_b', to='discussion_boards.board')),
                ('parent_comment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent_c', to='discussion_boards.comment')),
            ],
        ),
        migrations.CreateModel(
            name='DiscussionBoard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('date_created', models.DateField(auto_now_add=True)),
                ('last_commented_on', models.DateField(auto_now=True)),
                ('course', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='course_for_board', to='courses.course')),
            ],
        ),
        migrations.AddField(
            model_name='board',
            name='discussion_board',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='boards', to='discussion_boards.discussionboard'),
        ),
        migrations.CreateModel(
            name='UserViews',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_viewed', models.DateTimeField(auto_now=True)),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='board', to='discussion_boards.board')),
                ('user_viewed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_viewed', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='board',
            name='user_views',
            field=models.ManyToManyField(blank=True, related_name='user_views', through='discussion_boards.UserViews', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='UserVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote', models.CharField(choices=[('u', 'Up'), ('d', 'Down')], max_length=5)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_voted_on', to='discussion_boards.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_votes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='comment',
            name='votes',
            field=models.ManyToManyField(blank=True, through='discussion_boards.UserVote', to=settings.AUTH_USER_MODEL),
        ),
    ]
